// ==========================================
// 3.2 CREACI√ìN Y USO DE FUNCIONES
// ==========================================

/*
TEOR√çA:
- Una funci√≥n permite agrupar instrucciones que pueden ejecutarse cuando se las llama.
- Son reutilizables, mejoran la organizaci√≥n del c√≥digo y evitan repeticiones.
- Las funciones pueden recibir datos (par√°metros) y devolver resultados (return).
*/

// Funci√≥n para mostrar resultados en la p√°gina
function mostrarResultado(mensaje, tipo = 'info') {
  const resultadosDiv = document.getElementById('resultados');
  const resultadoItem = document.createElement('div');
  resultadoItem.className = `resultado-item ${tipo}`;
  resultadoItem.textContent = mensaje;
  resultadosDiv.appendChild(resultadoItem);
}

// Funci√≥n para limpiar resultados
function limpiarResultados() {
  document.getElementById('resultados').innerHTML = '<p class="placeholder">Los resultados de los ejercicios aparecer√°n aqu√≠...</p>';
}

// Ejemplo 1: funci√≥n simple
function saludar() {
  console.log("Hola, bienvenidos a la clase.");
  mostrarResultado("Hola, bienvenidos a la clase.", 'info');
}
saludar();

// Ejemplo 2: funci√≥n con par√°metros y validaci√≥n
function dividir(a, b) {
  if (b === 0) {
    console.log("No se puede dividir por cero");
    return "No se puede dividir por cero";
  } else {
    const resultado = a / b;
    console.log(`El resultado de dividir ${a} entre ${b} es:`, resultado);
    return resultado;
  }
}

// Funci√≥n para el bot√≥n de divisi√≥n
function ejecutarDivision() {
  const dividendo = parseFloat(document.getElementById('dividendo').value);
  const divisor = parseFloat(document.getElementById('divisor').value);
  
  if (isNaN(dividendo) || isNaN(divisor)) {
    mostrarResultado("Por favor, ingresa n√∫meros v√°lidos.", 'error');
    return;
  }
  
  const resultado = dividir(dividendo, divisor);
  if (typeof resultado === 'number') {
    mostrarResultado(`‚úÖ Divisi√≥n: ${dividendo} √∑ ${divisor} = ${resultado}`, 'success');
  } else {
    mostrarResultado(`‚ùå ${resultado}`, 'error');
  }
}

// Ejemplo 3: funci√≥n con l√≥gica m√°s compleja
function calcularIMC(peso, altura) {
  const imc = peso / (altura * altura);
  if (imc < 18.5) return "Bajo peso";
  if (imc < 25) return "Normal";
  if (imc < 30) return "Sobrepeso";
  return "Obesidad";
}

// Funci√≥n para el bot√≥n de IMC
function calcularIMC() {
  const peso = parseFloat(document.getElementById('peso').value);
  const altura = parseFloat(document.getElementById('altura').value);
  
  if (isNaN(peso) || isNaN(altura) || peso <= 0 || altura <= 0) {
    mostrarResultado("Por favor, ingresa valores v√°lidos para peso y altura.", 'error');
    return;
  }
  
  const categoria = calcularIMC(peso, altura);
  const imc = (peso / (altura * altura)).toFixed(1);
  mostrarResultado(`üìä IMC: ${imc} - Categor√≠a: ${categoria}`, 'success');
}

// ==========================================
// 3.3 SCOPE (√ÅMBITO DE LAS VARIABLES)
// ==========================================

/*
TEOR√çA:
- El scope define el "alcance" o lugar donde una variable es accesible.
- let y const ‚Üí tienen **scope de bloque** (entre llaves `{}`).
- var ‚Üí tiene **scope de funci√≥n**, lo que puede generar errores inesperados.
- Es mejor usar `let` o `const` para evitar problemas de sobrescritura o acceso indebido.
*/

// Variable global
let lenguaje = "JavaScript";

// Funci√≥n para probar scope global
function probarScopeGlobal() {
  const valorGlobal = document.getElementById('variableGlobal').value;
  mostrarResultado(`üåç Variable global: "${valorGlobal}" - Accesible desde cualquier funci√≥n`, 'info');
}

// Funci√≥n para probar scope de bloque
function probarScopeBloque() {
  mostrarResultado("üîç Probando scope de bloque...", 'info');
  
  if (true) {
    var conVar = "Var dentro del if";
    let conLet = "Let dentro del if";
    mostrarResultado(`‚úÖ var: "${conVar}" - let: "${conLet}" (dentro del bloque)`, 'success');
  }
  
  // var es accesible fuera del bloque (peligroso)
  mostrarResultado(`‚ö†Ô∏è var fuera del bloque: "${conVar}" (funciona pero es peligroso)`, 'error');
  
  // let no es accesible fuera del bloque (correcto)
  mostrarResultado(`‚úÖ let no es accesible fuera del bloque (comportamiento correcto)`, 'success');
}

// ==========================================
// 3.4 FUNCIONES AN√ìNIMAS Y FLECHA
// ==========================================

/*
TEOR√çA:
- Las funciones an√≥nimas no tienen nombre y se suelen guardar en variables o usar como argumentos.
- Las funciones flecha (arrow) tienen una sintaxis m√°s compacta y no tienen su propio "this".
- Son √∫tiles para callbacks o funciones simples.
*/

// Funci√≥n para calcular potencia con arrow function
function calcularPotencia() {
  const base = parseFloat(document.getElementById('base').value);
  const exponente = parseFloat(document.getElementById('exponente').value);
  
  if (isNaN(base) || isNaN(exponente)) {
    mostrarResultado("Por favor, ingresa n√∫meros v√°lidos.", 'error');
    return;
  }
  
  // Arrow function para calcular potencia
  const potencia = (base, exponente) => Math.pow(base, exponente);
  const resultado = potencia(base, exponente);
  
  mostrarResultado(`‚ö° Potencia: ${base}^${exponente} = ${resultado}`, 'success');
}

// Funci√≥n para generar saludos con arrow function
function generarSaludos() {
  const nombresInput = document.getElementById('nombres').value;
  
  if (!nombresInput.trim()) {
    mostrarResultado("Por favor, ingresa algunos nombres.", 'error');
    return;
  }
  
  const nombres = nombresInput.split(',').map(nombre => nombre.trim());
  
  // Arrow function con map
  const saludos = nombres.map(nombre => `Hola ${nombre}`);
  
  mostrarResultado(`üëã Saludos generados: ${saludos.join(', ')}`, 'success');
}

// ‚úÖ 3.5 Actividad pr√°ctica
// Consigna: Crear un algoritmo utilizando funciones con entrada de datos, procesamiento y salida

// üü¢ Parte 1 - Crear una funci√≥n que solicite los datos de entrada
function solicitarDatos() {
    const nombre = prompt("¬øCu√°l es tu nombre?");
    const edad = parseInt(prompt("¬øCu√°l es tu edad?"));
    return { nombre, edad };
}

// üü¢ Parte 2 - Crear una funci√≥n que procese la informaci√≥n obtenida
const procesarEdad = (edad) => {
  if (edad < 18) return "menor de edad";
  if (edad >= 18 && edad < 60) return "adulto";
  return "adulto mayor";
};

// üü¢ Parte 3 - Crear una funci√≥n para mostrar el resultado final
const mostrarResultadoFinal = function (usuario, categoria) {
  console.log(`Hola ${usuario}, sos ${categoria}.`);
  return `Hola ${usuario}, sos ${categoria}.`;
};

// Funci√≥n para iniciar la actividad completa
function iniciarActividad() {
  mostrarResultado("üöÄ Iniciando actividad completa...", 'info');
  
  // Actualizar √°rea de procesamiento
  document.getElementById('procesamiento').innerHTML = '<p>Procesando datos...</p>';
  
  try {
    const datos = solicitarDatos();
    
    if (!datos.nombre || isNaN(datos.edad)) {
      mostrarResultado("‚ùå Datos inv√°lidos ingresados", 'error');
      document.getElementById('procesamiento').innerHTML = '<p>Error: Datos inv√°lidos</p>';
      document.getElementById('resultadoFinal').innerHTML = '<p>No se pudo procesar</p>';
      return;
    }
    
    // Mostrar paso 1
    mostrarResultado(`üìù Paso 1 - Entrada: Nombre: "${datos.nombre}", Edad: ${datos.edad}`, 'info');
    
    // Procesar datos
    const categoria = procesarEdad(datos.edad);
    document.getElementById('procesamiento').innerHTML = `<p>‚úÖ Procesamiento: Edad ${datos.edad} ‚Üí ${categoria}</p>`;
    
    // Mostrar resultado final
    const resultado = mostrarResultadoFinal(datos.nombre, categoria);
    document.getElementById('resultadoFinal').innerHTML = `<p>üéØ Resultado: ${resultado}</p>`;
    
    mostrarResultado(`‚úÖ Actividad completada: ${resultado}`, 'success');
    
  } catch (error) {
    mostrarResultado("‚ùå Error en la actividad: " + error.message, 'error');
  }
}

// ==========================================
// DEMOSTRACIONES AUTOM√ÅTICAS
// ==========================================

// Demostraci√≥n de scope en bucles
function demostrarScopeBucles() {
  const demoDiv = document.getElementById('demoBucles');
  demoDiv.innerHTML = '<p>üîÑ Ejecutando demostraci√≥n...</p>';
  
  setTimeout(() => {
    let resultado = "Scope en bucles:\n";
    
    // Problema con var
    for (var i = 0; i < 3; i++) {
      setTimeout(() => {
        resultado += `var i: ${i}\n`;
      }, 100);
    }
    
    // Soluci√≥n con let
    for (let j = 0; j < 3; j++) {
      setTimeout(() => {
        resultado += `let j: ${j}\n`;
      }, 100);
    }
    
    demoDiv.innerHTML = `<p>‚úÖ var imprime 3 veces "3" (problema)</p><p>‚úÖ let imprime 0, 1, 2 (correcto)</p>`;
    mostrarResultado("üîç Demostraci√≥n de scope en bucles completada", 'info');
  }, 500);
}

// Demostraci√≥n de funciones an√≥nimas
function demostrarFuncionesAnonimas() {
  const demoDiv = document.getElementById('demoAnonimas');
  demoDiv.innerHTML = '<p>üîÑ Comparando funciones...</p>';
  
  // Funci√≥n tradicional
  function funcionTradicional() {
    return "Funci√≥n tradicional";
  }
  
  // Funci√≥n an√≥nima
  const funcionAnonima = function() {
    return "Funci√≥n an√≥nima";
  };
  
  // Arrow function
  const arrowFunction = () => "Arrow function";
  
  demoDiv.innerHTML = `
    <p>üìù Funci√≥n tradicional: ${funcionTradicional()}</p>
    <p>üìù Funci√≥n an√≥nima: ${funcionAnonima()}</p>
    <p>üèπ Arrow function: ${arrowFunction()}</p>
  `;
  
  mostrarResultado("‚öôÔ∏è Demostraci√≥n de funciones completada", 'info');
}

// Demostraci√≥n de arrow functions con arrays
function demostrarArrowFunctions() {
  const demoDiv = document.getElementById('demoArrow');
  demoDiv.innerHTML = '<p>üîÑ Procesando array...</p>';
  
  const numeros = [1, 2, 3, 4, 5];
  
  // Arrow functions con m√©todos de array
  const duplicados = numeros.map(num => num * 2);
  const pares = numeros.filter(num => num % 2 === 0);
  const suma = numeros.reduce((acc, num) => acc + num, 0);
  
  demoDiv.innerHTML = `
    <p>üìä Array original: [${numeros.join(', ')}]</p>
    <p>üîÑ Duplicados: [${duplicados.join(', ')}]</p>
    <p>üî¢ Pares: [${pares.join(', ')}]</p>
    <p>‚ûï Suma total: ${suma}</p>
  `;
  
  mostrarResultado("üèπ Demostraci√≥n de arrow functions completada", 'info');
}

// ==========================================
// INICIALIZACI√ìN
// ==========================================

// Funci√≥n que se ejecuta cuando se carga la p√°gina
document.addEventListener('DOMContentLoaded', function() {
  console.log("=== FUNCIONES Y SCOPE ===");
  mostrarResultado("üöÄ P√°gina de Funciones y Scope cargada correctamente", 'success');
  
  // Ejecutar ejemplos autom√°ticamente
  setTimeout(() => {
    console.log("\n=== SCOPE ===");
    mostrarResultado("üîç Ejemplos de scope cargados", 'info');
  }, 1000);
  
  setTimeout(() => {
    console.log("\n=== FUNCIONES AN√ìNIMAS Y FLECHA ===");
    mostrarResultado("üèπ Ejemplos de arrow functions cargados", 'info');
  }, 2000);
});
  

