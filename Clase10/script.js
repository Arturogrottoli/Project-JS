// 10. Clase Final: Herramientas y Caminos del Desarrollo

// 10.0 Material de Apoyo/Descargable
console.log("Revis√° los apuntes, enlaces y ejemplos del campus.");
console.log("Guardalos como referencia para seguir aprendiendo.");
console.log("Cheque√° canales de YouTube, documentaci√≥n oficial, y hacete una carpeta con tus recursos favoritos.");
console.log("Tambi√©n pod√©s seguir cursos gratuitos en plataformas como freeCodeCamp, MDN o YouTube (Midudev, Fazt, etc).");

// 10.1 Introducci√≥n a Frameworks
// Un framework te da estructuras listas para crear aplicaciones ordenadas y eficientes.
// Evit√°s reinventar la rueda y pod√©s enfocarte en resolver problemas reales.

console.log("Ejemplo simple en React:");
const Componente = () => {
  return `<h1>Hola desde React</h1>`;
};
console.log("Componente creado:", Componente());

console.log("React trabaja con componentes reutilizables y estado:");
const BotonContador = (conteo) => {
  return `<button>Clicks: ${conteo}</button>`;
};
console.log(BotonContador(3));

console.log("Otros frameworks populares:");
console.log("- Angular: m√°s estructurado y robusto, ideal para proyectos grandes.");
console.log("- Vue: muy amigable para empezar y r√°pido para prototipar.");
console.log("- Svelte: compila el c√≥digo y no necesita tanta librer√≠a adicional.");

// Ejercicio resuelto:
console.log("Ejercicio: crear un componente que liste productos:");
const Productos = (lista) => {
  return lista.map(p => `<li>${p}</li>`).join("");
};
console.log("<ul>" + Productos(["Zapatillas", "Campera", "Gorra"]) + "</ul>");

// 10.2 Proyectos con Node y NPM
// Node permite ejecutar JavaScript fuera del navegador (por ejemplo, en un servidor).
// NPM es el sistema para instalar paquetes (librer√≠as).

console.log("Pasos para un proyecto con Node:");
console.log("1. npm init -y // inicializa el proyecto");
console.log("2. npm install axios // instala una librer√≠a");

console.log("Con Node pod√©s crear APIs, automatizar tareas, leer archivos, etc.");

// Ejemplo: usar axios (debe estar instalado con npm)
/*
const axios = require("axios");
axios.get("https://jsonplaceholder.typicode.com/users")
  .then(res => res.data.forEach(u => console.log(u.name)));
*/

// Crear un archivo b√°sico con Node:
/*
fs.writeFile("saludo.txt", "Hola desde Node", (err) => {
  if (err) console.error("Error al escribir archivo");
  else console.log("Archivo creado");
});
*/

// 10.3 Paradigmas en Programaci√≥n
// Paradigma = manera de organizar y pensar la programaci√≥n

console.log("Imperativo (m√°s detallado):");
let edades = [20, 30, 40];
let mayores = [];
for (let i = 0; i < edades.length; i++) {
  if (edades[i] >= 30) mayores.push(edades[i]);
}
console.log("Mayores:", mayores);

console.log("Funcional (m√°s directo):");
const mayoresFuncional = edades.filter(e => e >= 30);
console.log("Mayores con filter:", mayoresFuncional);

console.log("Orientado a objetos:");
class Auto {
  constructor(marca, modelo) {
    this.marca = marca;
    this.modelo = modelo;
  }
  descripcion() {
    return `${this.marca} modelo ${this.modelo}`;
  }
}
const miAuto = new Auto("Toyota", "Corolla");
console.log(miAuto.descripcion());

// Ejercicio resuelto:
console.log("Ejercicio: transformar un array en un objeto con nombre y edad:");
const nombres = ["Ana", "Leo"];
const edadesAsignadas = nombres.map((n, i) => ({ nombre: n, edad: 20 + i }));
console.log(edadesAsignadas);

// 10.4 Caminos del Frontend
// Pod√©s elegir un enfoque seg√∫n tus intereses:

console.log("üé® Si te gusta el dise√±o:");
console.log("- UI/UX, prototipos en Figma, dise√±o responsive, accesibilidad.");

console.log("üíª Si te interesa programar:");
console.log("- React, Vue, Svelte, TypeScript, GraphQL.");

console.log("üß™ Si te atraen las pruebas:");
console.log("- Testing con Jest, Cypress, Testing Library.");

console.log("üéûÔ∏è Si te copan las animaciones:");
console.log("- CSS animations, GSAP, Framer Motion (para React).");

// Ejercicio pr√°ctico:
console.log("Ejercicio: cambio de clases con animaci√≥n en HTML");
/*
HTML:
<button onclick="toggle()">Mostrar</button>
<div id="box" class="oculto">Contenido</div>

CSS:
.oculto { display: none; }
.visible { display: block; transition: all 0.3s ease; }

JS:
function toggle() {
  const box = document.getElementById("box");
  box.classList.toggle("visible");
  box.classList.toggle("oculto");
}
*/

// 10.5 Conclusiones y Pr√≥ximos Pasos
console.log("Ten√©s los fundamentos: HTML, CSS, JS, l√≥gica y asincronismo.");
console.log("Pod√©s seguir con un camino m√°s profesional.");

console.log("üéØ Ideas de proyectos para practicar:");
console.log("- To-do list (con guardar en localStorage)");
console.log("- Clima usando una API p√∫blica");
console.log("- P√°gina personal con portfolio y contacto");
console.log("- Juego tipo trivia o piedra-papel-tijera");

console.log("üí° Consejo:");
console.log("Cre√° proyectos. Compartilos. Subilos a GitHub. Ped√≠ feedback.");
console.log("Cada proyecto nuevo te ense√±a algo que no sab√≠as.");

console.log("üéì El aprendizaje nunca termina. Pero ya ten√©s el mapa para avanzar.");
